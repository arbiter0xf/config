ECHO=@$$(which echo)

all_targets := \
	cfgcontrol \
	scripts_common

# TODO
# Subprojects would not need to be added manually if a Makefile was to be
# added to each directory level and calling all makefiles of all
# subdirectories.

# Subprojects are required to have their own Makefile
# Each subproject is a directory
subprojects := \
	scripts/env/cfgcontrol \
	scripts/common

# repo_root is added by configure to actual Makefile
data_dir := $(repo_root)/data
bin_dir := $(repo_root)/bin
out_dir := $(repo_root)/out
include_dir := $(repo_root)/include

REPO_NAME := useful-files
GLOBAL_CFGCONTROL_LINK_PATH := /usr/local/bin/cfgcontrol
REPO_ENVPATH_ENTRY := PATH=\"\$$HOME/.$(REPO_NAME)/bin:\$$PATH\"

common_paths_link := common_paths
processed_common_paths := $(bin_dir)/common/common_paths.sh
home_repo_dir := $$HOME/.$(REPO_NAME)
home_link_to_repo := $(home_repo_dir)/bin
repo_bin_repo_dir := $(bin_dir)/$(REPO_NAME)
repo_bin_common_paths := $(repo_bin_repo_dir)/$(common_paths_link)
usr_local_bin_repo_dir := /usr/local/bin/$(REPO_NAME)
usr_local_bin_common_paths := $(usr_local_bin_repo_dir)/$(common_paths_link)

line_removed_tag := >>> line removed by $(REPO_NAME) uninstall process <<<

search_for_path_entry_in_subshell := \
	"$$(cat $$HOME/.profile | grep "$$(echo $(REPO_ENVPATH_ENTRY))")"

#### make does not consider implicit rules for PHONY targets
.PHONY: all clean install uninstall $(all_targets)

#### Could not use pipe as delimiter so substituting first
define remove_home_repo_dir_from_path
	sed -i 's|'"$$(echo $(REPO_ENVPATH_ENTRY))"'|$(line_removed_tag)|' \
		$$HOME/.profile
	sed -i '/$(line_removed_tag)/d' $$HOME/.profile
endef

define subproject_make_with_common_attributes
	$(eval subproject=$1)
	$(eval project_out=$(out_dir)/$(subproject))

	if [ ! -d $(project_out) ] ; then mkdir -p $(project_out) ; fi

	$(MAKE) -C $(subproject) \
		REPOROOT=$(repo_root) \
		BINDIR=$(bin_dir) \
		PROJECTOUT=$(project_out) \
		all
endef

define install_to_usr_local_bin
	if [ ! -d "$(usr_local_bin_repo_dir)" ] ; then \
		mkdir -p $(usr_local_bin_repo_dir) ; \
	fi

	$(call add_nontexistent_symlink, \
		$(bin_dir)/cfgcontrol, $(GLOBAL_CFGCONTROL_LINK_PATH))
	$(call add_nontexistent_symlink, \
		$(processed_common_paths) \
		$(usr_local_bin_common_paths))
endef

define usr_local_bin_uninstall
	rm $(GLOBAL_CFGCONTROL_LINK_PATH)
	rm -r $(usr_local_bin_repo_dir)
endef

# ifeq statements inside define blocks are treated as shell commands
define install_to_home
	$(eval envpath_entry_in_profile=$(shell \
		if [ -n $(search_for_path_entry_in_subshell) ] ; then \
			echo "y" ; else echo "n" ; \
		fi))

	if [ "n" = "$(envpath_entry_in_profile)" ] ; then \
		if [ ! -d "$(home_repo_dir)" ] ; then \
			mkdir -p $(home_repo_dir) ; \
		fi ; \
		if [ ! -d "$(repo_bin_repo_dir)" ] ; then \
			mkdir -p $(repo_bin_repo_dir) ; \
		fi ; \
		ln -s \
			$(processed_common_paths) \
			$(repo_bin_common_paths) ; \
		ln -s \
			$(bin_dir) \
			$(home_link_to_repo) ; \
		echo "$(REPO_ENVPATH_ENTRY)" >> $$HOME/.profile ; \
	fi
endef

define home_uninstall
	rm -r $(home_repo_dir)
	rm -r $(repo_bin_repo_dir)
	$(call remove_home_repo_dir_from_path)
endef

#	$(eval envpath_entry_in_profile=$(shell \
#		if [ -n "$$(\
#			cat $$HOME/.profile \
#			| grep "$$(echo $(REPO_ENVPATH_ENTRY))")" ] \
#			; then echo "y" ; else echo "n" ; \
#		fi))

# use following!
#	echo found is $(envpath_entry_in_profile)
#	$(eval envpath_entry_in_profile=$(shell if [ -n "$$(cat $$HOME/.profile | grep useful-files)" ] ; then echo "y" ; else echo "n" ; fi))

# $(eval result=$(shell if [ -n "$$(cat $$HOME/.profile | grep "$$(echo $(REPO_ENVPATH_ENTRY))")" ] ; then echo "y" ; else echo "n" ; fi))
# echo filtered_path is: $(result)


#$(eval envpath_entry_in_profile=$(shell cat $HOME/.profile | grep "$(REPO_ENVPATH_ENTRY)"))

# readonly repo_envpath_entry="PATH=\"\$HOME/.$REPO_NAME/bin:\$PATH\""
#	filtered_path="$(cat $HOME/.profile | grep "$repo_envpath_entry")"
#	if [ -z "$filtered_path" ] ; then
#		echo "$repo_envpath_entry" \
#			>> $HOME/.profile
#

# yes_no_macro := read -p "$(value prompt)" ans ; echo "$$ans"

define add_nontexistent_symlink
	$(eval destination=$(1))
	$(eval path_to_new_link=$(2))

	if [ ! -h "$(path_to_new_link)" ] ; then \
		ln -s $(destination) $(path_to_new_link); \
	fi
endef

define add_to_path_if_wanted
	echo in add_to_env_path_if_wanted. add is: $(add_to_env_path)

	if [ "true" == "$(add_to_env_path)" ] ; then \
	fi
endef

#else
#	echo add_to_env_path is false

#	$(eval prompt=Add project bin/ to your PATH? [y/n]: )
#	echo yes_no_macro is $(yes_no_macro)
#	$(eval answer=$(shell $(yes_no_macro)))
#	$(eval answer=$(shell \
#		read -p "\$(prompt)" ans ; echo "$$ans"))
#	echo answer is: $(answer)

define create_project_directories
	if [ ! -d "$(bin_dir)" ] ; then mkdir $(bin_dir) ; fi
	if [ ! -d "$(out_dir)" ] ; then mkdir $(out_dir) ; fi
	if [ ! -d "$(data_dir)" ] ; then mkdir $(data_dir) ; fi
endef

define print_install_done
	$(ECHO) ""
	$(ECHO) "+==============+"
	$(ECHO) "| INSTALL DONE |"
	$(ECHO) "+==============+"
	$(ECHO) ""
endef

define print_uninstall_done
	$(ECHO) ""
	$(ECHO) "+================+"
	$(ECHO) "| UNINSTALL DONE |"
	$(ECHO) "+================+"
	$(ECHO) ""
endef

all: $(all_targets)
	echo "Make done"

clean:
	rm -r $(out_dir)

scripts_common: scripts/common
	$(call subproject_make_with_common_attributes, $^)

cfgcontrol: scripts/env/cfgcontrol
	$(call subproject_make_with_common_attributes, $^)

#	$(eval project_out=$(out_dir)/$^)
#	$(MAKE) -C $^ \
#		REPOROOT=$(repo_root) \
#		BINDIR=$(bin_dir) \
#		PROJECTOUT=$(project_out) \
#		all

install:
	$(call create_project_directories)
ifeq ($(add_to_env_path),true)
ifeq ($(install_destination),home)
	$(call install_to_home)
ifeq ($(be_fancy),true)
	$(call print_install_done)
endif
	$(ECHO) ""
	$(ECHO) "Run \"source ~/.profile\" to add scripts to PATH without the"
	$(ECHO) "need to open a new shell."
endif
ifeq ($(install_destination),usr_local_bin)
	$(call install_to_usr_local_bin)
ifeq ($(be_fancy),true)
	$(call print_install_done)
endif
endif
endif

uninstall:
ifeq ($(add_to_env_path),true)
ifeq ($(install_destination),home)
	$(call home_uninstall)
endif
ifeq ($(install_destination),usr_local_bin)
	$(call usr_local_bin_uninstall)
endif
endif
ifeq ($(be_fancy),true)
	$(call print_uninstall_done)
endif
	$(ECHO) "Run \"source ~/.profile\" to remove directories related to"
	$(ECHO) "$(REPO_NAME) from PATH without the need to open a new shell."
